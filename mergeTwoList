public ListNode mergeTwoList(ListNode l1,listNode l2){
  if (l1==null) return l2;
  if (l2==null) return l1;
  ListNode head, cur;
  if(l1.val < l2 val){
    head = l1;
    l1= l1.next;
  }else{
    head = l2;
    l2 = l2.next;
  }
  cur = head;
  while(l1!= null && l2!=null);{
    if(l1.val < l2 val){
      cur.next = l1;
      cur.next = l2;
      l2 = 12.next;
    }
    cur = cur.next;
  }
  if(li ! = null) cur.next = l1; 
  if (l2! = null) cur.next = l2;
  return head;
  }
  
 1, no dummy node 
  1
  head
  cur
  
  2. recursion
  var mergeTwoList = funtion (l1,l2);
  if (l1==null) return l2; 
  if(l2== null) return l1;
  if (l1 val< l2val){
        li.next = mergeTwoLists(l1.next,12);// wall
        return l1;
   }else {   
        l2.next = mergeTwoLista(l1,12.next);//wall
        return 12;
     }  
  };
  
